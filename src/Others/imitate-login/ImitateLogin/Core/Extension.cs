/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace ImitateLogin
{

	[Serializable]
	public partial class Extension : TBase
	{
		private PluginType _ExtendType;
		private THashSet<string> _SupportSite;
		private string _Path;
		private string _Host;
		private int _Port;
		private string _UrlFormat;
		private string _HttpMethod;

		public PluginType ExtendType
		{
			get
			{
				return _ExtendType;
			}
			set
			{
				__isset.ExtendType = true;
				this._ExtendType = value;
			}
		}

		public THashSet<string> SupportSite
		{
			get
			{
				return _SupportSite;
			}
			set
			{
				__isset.SupportSite = true;
				this._SupportSite = value;
			}
		}

		public string Path
		{
			get
			{
				return _Path;
			}
			set
			{
				__isset.Path = true;
				this._Path = value;
			}
		}

		public string Host
		{
			get
			{
				return _Host;
			}
			set
			{
				__isset.Host = true;
				this._Host = value;
			}
		}

		public int Port
		{
			get
			{
				return _Port;
			}
			set
			{
				__isset.Port = true;
				this._Port = value;
			}
		}

		public string UrlFormat
		{
			get
			{
				return _UrlFormat;
			}
			set
			{
				__isset.UrlFormat = true;
				this._UrlFormat = value;
			}
		}

		public string HttpMethod
		{
			get
			{
				return _HttpMethod;
			}
			set
			{
				__isset.HttpMethod = true;
				this._HttpMethod = value;
			}
		}


		public Isset __isset;
		[Serializable]
		public struct Isset
		{
			public bool ExtendType;
			public bool SupportSite;
			public bool Path;
			public bool Host;
			public bool Port;
			public bool UrlFormat;
			public bool HttpMethod;
		}

		public Extension()
		{
		}

		public void Read(TProtocol iprot)
		{
			TField field;
			iprot.ReadStructBegin();
			while (true)
			{
				field = iprot.ReadFieldBegin();
				if (field.Type == TType.Stop)
				{
					break;
				}
				switch (field.ID)
				{
					case 1:
						if (field.Type == TType.I32)
						{
							ExtendType = (PluginType)iprot.ReadI32();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 2:
						if (field.Type == TType.Set)
						{
							{
								SupportSite = new THashSet<string>();
								TSet _set5 = iprot.ReadSetBegin();
								for (int _i6 = 0; _i6 < _set5.Count; ++_i6)
								{
									string _elem7 = null;
									_elem7 = iprot.ReadString();
									SupportSite.Add(_elem7);
								}
								iprot.ReadSetEnd();
							}
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 3:
						if (field.Type == TType.String)
						{
							Path = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 4:
						if (field.Type == TType.String)
						{
							Host = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 5:
						if (field.Type == TType.I32)
						{
							Port = iprot.ReadI32();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 6:
						if (field.Type == TType.String)
						{
							UrlFormat = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 7:
						if (field.Type == TType.String)
						{
							HttpMethod = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					default:
						TProtocolUtil.Skip(iprot, field.Type);
						break;
				}
				iprot.ReadFieldEnd();
			}
			iprot.ReadStructEnd();
		}

		public void Write(TProtocol oprot)
		{
			TStruct struc = new TStruct("Extension");
			oprot.WriteStructBegin(struc);
			TField field = new TField();
			if (__isset.ExtendType)
			{
				field.Name = "ExtendType";
				field.Type = TType.I32;
				field.ID = 1;
				oprot.WriteFieldBegin(field);
				oprot.WriteI32((int)ExtendType);
				oprot.WriteFieldEnd();
			}
			if (SupportSite != null && __isset.SupportSite)
			{
				field.Name = "SupportSite";
				field.Type = TType.Set;
				field.ID = 2;
				oprot.WriteFieldBegin(field);
				{
					oprot.WriteSetBegin(new TSet(TType.String, SupportSite.Count));
					foreach (string _iter8 in SupportSite)
					{
						oprot.WriteString(_iter8);
					}
					oprot.WriteSetEnd();
				}
				oprot.WriteFieldEnd();
			}
			if (Path != null && __isset.Path)
			{
				field.Name = "Path";
				field.Type = TType.String;
				field.ID = 3;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(Path);
				oprot.WriteFieldEnd();
			}
			if (Host != null && __isset.Host)
			{
				field.Name = "Host";
				field.Type = TType.String;
				field.ID = 4;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(Host);
				oprot.WriteFieldEnd();
			}
			if (__isset.Port)
			{
				field.Name = "Port";
				field.Type = TType.I32;
				field.ID = 5;
				oprot.WriteFieldBegin(field);
				oprot.WriteI32(Port);
				oprot.WriteFieldEnd();
			}
			if (UrlFormat != null && __isset.UrlFormat)
			{
				field.Name = "UrlFormat";
				field.Type = TType.String;
				field.ID = 6;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(UrlFormat);
				oprot.WriteFieldEnd();
			}
			if (HttpMethod != null && __isset.HttpMethod)
			{
				field.Name = "HttpMethod";
				field.Type = TType.String;
				field.ID = 7;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(HttpMethod);
				oprot.WriteFieldEnd();
			}
			oprot.WriteFieldStop();
			oprot.WriteStructEnd();
		}

		public override string ToString()
		{
			StringBuilder sb = new StringBuilder("Extension(");
			sb.Append("ExtendType: ");
			sb.Append(ExtendType);
			sb.Append(",SupportSite: ");
			sb.Append(SupportSite);
			sb.Append(",Path: ");
			sb.Append(Path);
			sb.Append(",Host: ");
			sb.Append(Host);
			sb.Append(",Port: ");
			sb.Append(Port);
			sb.Append(",UrlFormat: ");
			sb.Append(UrlFormat);
			sb.Append(",HttpMethod: ");
			sb.Append(HttpMethod);
			sb.Append(")");
			return sb.ToString();
		}

	}

}
