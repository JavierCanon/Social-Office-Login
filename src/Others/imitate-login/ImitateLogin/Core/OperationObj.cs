/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace ImitateLogin
{

	[Serializable]
	public partial class OperationObj : TBase
	{
		private string _loginSite;
		private string _imageUrl;
		private byte[] _image;

		public string LoginSite
		{
			get
			{
				return _loginSite;
			}
			set
			{
				__isset.loginSite = true;
				this._loginSite = value;
			}
		}

		public string ImageUrl
		{
			get
			{
				return _imageUrl;
			}
			set
			{
				__isset.imageUrl = true;
				this._imageUrl = value;
			}
		}

		public byte[] Image
		{
			get
			{
				return _image;
			}
			set
			{
				__isset.image = true;
				this._image = value;
			}
		}


		public Isset __isset;
		[Serializable]
		public struct Isset
		{
			public bool loginSite;
			public bool imageUrl;
			public bool image;
		}

		public OperationObj()
		{
		}

		public void Read(TProtocol iprot)
		{
			TField field;
			iprot.ReadStructBegin();
			while (true)
			{
				field = iprot.ReadFieldBegin();
				if (field.Type == TType.Stop)
				{
					break;
				}
				switch (field.ID)
				{
					case 1:
						if (field.Type == TType.String)
						{
							LoginSite = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 2:
						if (field.Type == TType.String)
						{
							ImageUrl = iprot.ReadString();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					case 3:
						if (field.Type == TType.String)
						{
							Image = iprot.ReadBinary();
						}
						else
						{
							TProtocolUtil.Skip(iprot, field.Type);
						}
						break;
					default:
						TProtocolUtil.Skip(iprot, field.Type);
						break;
				}
				iprot.ReadFieldEnd();
			}
			iprot.ReadStructEnd();
		}

		public void Write(TProtocol oprot)
		{
			TStruct struc = new TStruct("OperationObj");
			oprot.WriteStructBegin(struc);
			TField field = new TField();
			if (LoginSite != null && __isset.loginSite)
			{
				field.Name = "loginSite";
				field.Type = TType.String;
				field.ID = 1;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(LoginSite);
				oprot.WriteFieldEnd();
			}
			if (ImageUrl != null && __isset.imageUrl)
			{
				field.Name = "imageUrl";
				field.Type = TType.String;
				field.ID = 2;
				oprot.WriteFieldBegin(field);
				oprot.WriteString(ImageUrl);
				oprot.WriteFieldEnd();
			}
			if (Image != null && __isset.image)
			{
				field.Name = "image";
				field.Type = TType.String;
				field.ID = 3;
				oprot.WriteFieldBegin(field);
				oprot.WriteBinary(Image);
				oprot.WriteFieldEnd();
			}
			oprot.WriteFieldStop();
			oprot.WriteStructEnd();
		}

		public override string ToString()
		{
			StringBuilder sb = new StringBuilder("OperationObj(");
			sb.Append("LoginSite: ");
			sb.Append(LoginSite);
			sb.Append(",ImageUrl: ");
			sb.Append(ImageUrl);
			sb.Append(",Image: ");
			sb.Append(Image);
			sb.Append(")");
			return sb.ToString();
		}

	}

}
